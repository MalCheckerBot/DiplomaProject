const { default: makeWASocket, DisconnectReason, useMultiFileAuthState } = require('baileys');
const axios = require('axios');
const qrcode = require('qrcode-terminal');
const cheerio = require('cheerio');
const keys = require('./keys.json');
const VIRUSTOTAL_API_KEY = keys.VIRUSTOTAL_API_KEY;
const GOOGLE_SAFE_BROWSING_API_KEY = keys.GOOGLE_SAFE_BROWSING_API_KEY;
const AIML_API_KEY = keys.AIML_API_KEY;
const AIML_API_URL = keys.AIML_API_URL;
const userState = {};
const userData = {};
const lastMessageTime = {};
const MESSAGE_COOLDOWN = 1000;
function isValidLink(text) {
    const domainPattern = /^(https?:\/\/)?([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}(\/.*)?$/;
    return Boolean(text.match(domainPattern));
}
function getMainMenu() {
    return 'üëãüèª –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫, –Ω–æ–º–µ—Ä–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤.\nüîó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É - 1\n‚òéÔ∏è –£–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–æ–º–µ—Ä - 2\nü§ì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò - 3\nüëÄ –ü–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∞—Å - 4';
}
async function checkLink(url) {
    if (!url.startsWith('http://') && !url.startsWith('https://')) {
        url = 'https://' + url;
    }
    const vtResult = await checkWithVirusTotal(url);
    const vtMessage = `ü¶† VirusTotal:\n${vtResult.error ? vtResult.error : `–£–≥—Ä–æ–∑—ã: ${vtResult.malicious}/${vtResult.total_engines} ‚ö†Ô∏è\n–û—Ç—á—ë—Ç: ${vtResult.report_url}`}`;
    const saResult = await checkWithScamAdviser(url);
    const saMessage = `‚òÑÔ∏è ScamAdviser:\n${saResult.error ? saResult.error : `–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: ${saResult.trust_score} / 100 ‚≠ê\n–û—Ç—á—ë—Ç: ${saResult.report_url}`}`;
    const gsbResult = await checkWithGoogleSafeBrowsing(url);
    const gsbMessage = `‚òÅÔ∏è Google Safe Browsing:\n${gsbResult.error ? gsbResult.error : gsbResult.is_safe ? `–°—Å—ã–ª–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞ ‚úÖ` : `–ù–∞–π–¥–µ–Ω—ã —É–≥—Ä–æ–∑—ã: ${gsbResult.threats.join(`, `)} ‚ö†Ô∏è`}`;
    let result = `${vtMessage}\n\n${saMessage}\n\n${gsbMessage}`;
    let isDangerous = false;
    let isSafe = true;
    if (!vtResult.error && vtResult.malicious > 0) {
        isDangerous = true;
        isSafe = false;
    }
    if (!saResult.error && parseInt(saResult.trust_score) < 75) {
        isDangerous = true;
        isSafe = false;
    }
    if (!gsbResult.error && !gsbResult.is_safe) {
        isDangerous = true;
        isSafe = false;
    }
    if (isDangerous) {
        result += '\n\nüìù –ò—Ç–æ–≥:\n–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ - –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –í—Ä–µ–¥–æ–Ω–æ—Å–Ω–∞—è.\n–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –µ—ë –æ—Ç–∫—Ä—ã–≤–∞—Ç—å‚ùóÔ∏è';
    } else if (isSafe) {
        result += '\n\nüìù –ò—Ç–æ–≥:\n–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ - –ë–µ–∑–æ–ø–∞—Å–Ω–∞ ‚úÖ';
    }
    return result;
}
async function checkWithVirusTotal(url) {
    const encodedUrl = Buffer.from(url).toString('base64url').replace(/=+$/, '');
    const reportUrl = `https://www.virustotal.com/gui/url/${encodedUrl}/detection`;
    try {
        const scanResponse = await axios.post('https://www.virustotal.com/api/v3/urls', new URLSearchParams({ url }).toString(), {
            headers: {
                'x-apikey': VIRUSTOTAL_API_KEY,
                'Content-Type': 'application/x-www-form-urlencoded'
            }
        });
        if (scanResponse.status !== 200) {
            return { error: '–û—à–∏–±–∫–∞ VirusTotal.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫' };
        }
        const analysisId = scanResponse.data.data.id;
        while (true) {
            const analysisResponse = await axios.get(`https://www.virustotal.com/api/v3/analyses/${analysisId}`, {
                headers: { 'x-apikey': VIRUSTOTAL_API_KEY }
            });
            const status = analysisResponse.data.data.attributes.status;
            if (status === 'completed') {
                const stats = analysisResponse.data.data.attributes.stats;
                const totalEngines = stats.harmless + stats.malicious + stats.suspicious + stats.undetected;
                return { malicious: stats.malicious, total_engines: totalEngines, report_url: reportUrl };
            } else if (status === 'queued') {
                await new Promise(resolve => setTimeout(resolve, 10000));
            } else {
                return { error: '–û—à–∏–±–∫–∞, —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞ VirusTotal.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫' };
            }
        }
    } catch (e) {
        console.error(`VirusTotal error: ${e.message}, Code: ${e.code}, Response: ${JSON.stringify(e.response?.data)}`);
        return { error: '–û—à–∏–±–∫–∞ VirusTotal.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫' };
    }
}
async function checkWithScamAdviser(url) {
    try {
        const domain = url.split('//')[1].split('/')[0];
        const reportUrl = `https://www.scamadviser.com/check-website/${domain}`;
        const response = await axios.get(reportUrl);
        if (response.status === 200) {
            const $ = cheerio.load(response.data);
            const trustScore = $('div#trustscore').attr('data-rating');
            if (trustScore) {
                return { trust_score: trustScore.trim(), report_url: reportUrl };
            }
            return { error: '–û—à–∏–±–∫–∞, —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫' };
        } else {
            return { error: '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ScamAdviser.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫' };
        }
    } catch (e) {
        return { error: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ScamAdviser.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫' };
    }
}
async function checkWithGoogleSafeBrowsing(url) {
    try {
        const response = await axios.post(`https://safebrowsing.googleapis.com/v4/threatMatches:find?key=${GOOGLE_SAFE_BROWSING_API_KEY}`, {
            client: { clientId: 'your-client-id', clientVersion: '1.0' },
            threatInfo: {
                threatTypes: ['MALWARE', 'SOCIAL_ENGINEERING', 'UNWANTED_SOFTWARE', 'POTENTIALLY_HARMFUL_APPLICATION'],
                platformTypes: ['ANY_PLATFORM'],
                threatEntryTypes: ['URL'],
                threatEntries: [{ url }]
            }
        });
        if (response.data.matches) {
            return { threats: response.data.matches.map(m => m.threatType), is_safe: false };
        }
        return { threats: [], is_safe: true };
    } catch (e) {
        return { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ Google Safe Browsing.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫' };
    }
}
async function checkPhone(phoneNumber) {
    const cleanedNumber = phoneNumber.trim().replace(/[()\-\s]+/g, '').replace(/^8/, '+7');
    if (!cleanedNumber.startsWith('+') || !/^\+\d+$/.test(cleanedNumber)) {
        return '‚òéÔ∏è –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –ø–ª—é—Å–∞ (+) –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫';
    }
    try {
        const response = await axios.get(`https://spamcalls.net/en/search?q=${cleanedNumber}`, {
            timeout: 20000,
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            },
            proxy: {
                protocol: keys.proxy.protocol,
                host: keys.proxy.host,
                port: keys.proxy.port,
                auth: {
                    username: keys.proxy.username,
                    password: keys.proxy.password
                }
            }
        });
        if (response.status === 200) {
            const $ = cheerio.load(response.data);
            const title = $('h1').text();
            if (title && cleanedNumber.includes(title)) {
                const details = {};
                $('div.col-lg-12.clickable-scroll-to').each((_, block) => {
                    const h3 = $(block).find('h3').text().trim();
                    if (h3) {
                        const key = h3.includes('Most frequently reported') ? 'Most frequently reported' : h3;
                        const value = $(block).find('h4').text().trim() || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.';
                        details[key] = value;
                    }
                });
                let detailsMessage = '';
                if (details['Spam-Risk']) detailsMessage += `–£—Ä–æ–≤–µ–Ω—å –°–ø–∞–º–∞: ${details[`Spam-Risk`]}\n`;
                if (details['Country of origin']) detailsMessage += `–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è: ${details[`Country of origin`]}\n`;
                if (details['Most frequently reported']) detailsMessage += `–ß–∞—â–µ –≤—Å–µ–≥–æ –∂–∞–ª—É—é—Ç—Å—è –Ω–∞: ${details[`Most frequently reported`]}\n`;
                const reportUrl = `https://spamcalls.net/en/search?q=${cleanedNumber}`;
                if (details['Spam-Risk'] || details['Most frequently reported']) {
                    return `‚ö†Ô∏è –ù–æ–º–µ—Ä ${cleanedNumber} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —Å–ø–∞–º –∏–ª–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ.\n\nüîé –î–µ—Ç–∞–ª–∏:\n${detailsMessage}\nüìù –û—Ç—á—ë—Ç: ${reportUrl}`;
                } else {
                    return `‚úÖ –ù–æ–º–µ—Ä ${cleanedNumber} –±–µ–∑–æ–ø–∞—Å–µ–Ω.\n\nüìù –û—Ç—á—ë—Ç: ${reportUrl}`;
                }
            } else {
                return `‚úÖ –ù–æ–º–µ—Ä ${cleanedNumber} –±–µ–∑–æ–ø–∞—Å–µ–Ω.\n\nüìù –û—Ç—á—ë—Ç: ${reportUrl}`;
            }
        } else {
            console.error(`SpamCalls error: HTTP ${response.status}`);
            return '‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ SpamCalls.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫';
        }
    } catch (e) {
        console.error(`SpamCalls error: ${e.message}, Code: ${e.code}, Response: ${JSON.stringify(e.response?.data)}`);
        return '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ SpamCalls.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫';
    }
}
async function getAIResponse(query) {
    try {
        const response = await axios.post(AIML_API_URL, {
            model: 'gpt-3.5-turbo-instruct',
            prompt: `–î–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ, —Å–∫–∞–∂–∏: '–ò–∑–≤–∏–Ω–∏, —è –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ.' –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ—è—Å–µ–Ω –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–π, –æ—Ç–≤–µ—á–∞–π: '–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω—è–ª —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å. –ó–∞–¥–∞–π –µ–≥–æ —Ç–æ—á–Ω–µ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!' –í–æ—Ç –≤–æ–ø—Ä–æ—Å: ${query}`,
            max_tokens: 200,
            temperature: 0.3
        }, {
            headers: { 'Authorization': `Bearer ${AIML_API_KEY}`, 'Content-Type': 'application/json' },
            timeout: 20000,
            proxy: {
                protocol: keys.proxy.protocol,
                host: keys.proxy.host,
                port: keys.proxy.port,
                auth: {
                    username: keys.proxy.username,
                    password: keys.proxy.password
                }
            }
        });
        const cleanText = response.data.choices[0].text.trim().replace(/\n\n/g, ' ').replace(/\n/g, ' ');
        return `ü§ì –û—Ç–≤–µ—Ç:\n${cleanText}`;
    } catch (e) {
        console.error(`AI error: ${e.message}, Code: ${e.code}, URL: ${e.config?.url}, Headers: ${JSON.stringify(e.config?.headers)}, Response: ${JSON.stringify(e.response?.data)}, FullError: ${JSON.stringify(e, Object.getOwnPropertyNames(e))}`);
        return '‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –ò–ò.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫';
    }
}
async function startWhatsAppBot() {
    const { state, saveCreds } = await useMultiFileAuthState('auth_info');
    const sock = makeWASocket({
        auth: state,
        printQRInTerminal: true,
        generateLinkPreview: false,
        generateHighQualityLinkPreview: false
    });
    sock.ev.on('connection.update', (update) => {
        const { connection, lastDisconnect, qr } = update;
        if (qr) {
            console.log('QR code received, please scan it:');
            qrcode.generate(qr, { small: true });
        }
        if (connection === 'close') {
            if (lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut) {
                startWhatsAppBot();
            } else {
                console.log('Logged out, please scan QR again.');
            }
        } else if (connection === 'open') {
            console.log('WhatsApp connected!');
        }
    });
    sock.ev.on('creds.update', saveCreds);
    sock.ev.on('messages.upsert', async ({ messages }) => {
        const msg = messages[0];
        if (!msg.message || msg.key.fromMe) return;
        const from = msg.key.remoteJid;
        const userId = from.split('@')[0];
        const now = Date.now();
        if (lastMessageTime[userId] && now - lastMessageTime[userId] < MESSAGE_COOLDOWN) return;
        lastMessageTime[userId] = now;
        if (!userState[userId]) userState[userId] = 'start';
        const text = (msg.message.conversation || msg.message.extendedTextMessage?.text || '').toLowerCase();
        const originalText = msg.message.conversation || msg.message.extendedTextMessage?.text || '';
        if (text === '1') {
            userState[userId] = 'awaiting_link';
            await sock.sendMessage(from, { text: 'üîó –ñ–¥—É –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n–ñ–¥–∞—Ç—å –æ–∫–æ–ª–æ 15 —Å–µ–∫—É–Ω–¥ ‚åõÔ∏è\n\n‚õîÔ∏è –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ' });
        } else if (text === '2') {
            userState[userId] = 'awaiting_phone';
            await sock.sendMessage(from, { text: '‚òéÔ∏è –ñ–¥—É –æ—Ç —Ç–µ–±—è –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 707 404 6633).\n\n‚õîÔ∏è –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ' });
        } else if (text === '3') {
            userState[userId] = 'awaiting_chat';
            await sock.sendMessage(from, { text: 'ü§ì –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å, —è —Ç–µ–±–µ –æ—Ç–≤–µ—á—É.\n\n‚õîÔ∏è –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ' });
        } else if (text === '4') {
            userState[userId] = 'start';
            delete userData[userId];
            await sock.sendMessage(from, { text: 'üéì –Ø –¥–∏–ø–ª–æ–º–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ Astana IT University\n–í —á–∞—Å—Ç–Ω–æ—Å—Ç–∏ Alikhan Zhuma, Valerii Pankov –∏ Rodion Kuznetsov.\n–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª–∏, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –Ω–æ–º–µ—Ä–∞ –∏ —Ñ–∞–π–ª—ã üëÅ' });
            await sock.sendMessage(from, { text: getMainMenu() });
        } else if (text === '–æ—Ç–º–µ–Ω–∞' && ['awaiting_link', 'awaiting_phone', 'awaiting_chat', 'confirming_phone'].includes(userState[userId])) {
            userState[userId] = 'start';
            delete userData[userId];
            await sock.sendMessage(from, { text: '‚õîÔ∏è –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ! –ß—Ç–æ –¥–∞–ª—å—à–µ?\n' + getMainMenu() });
        } else if (userState[userId] === 'awaiting_link') {
            const link = isValidLink(originalText) ? (originalText.startsWith('http') ? originalText : 'https://' + originalText) : null;
            if (link) {
                await sock.sendMessage(from, { text: '–ü—Ä–æ–≤–µ—Ä—è—é...üîç‚ú®üîÆ' });
                const result = await checkLink(link);
                await sock.sendMessage(from, { text: result });
                userState[userId] = 'start';
                delete userData[userId];
                await sock.sendMessage(from, { text: getMainMenu() });
            } else {
                await sock.sendMessage(from, { text: 'ü•∫ –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É.\n\nüîó –ñ–¥—É –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n–ñ–¥–∞—Ç—å –æ–∫–æ–ª–æ 15 —Å–µ–∫—É–Ω–¥ ‚åõÔ∏è\n\n‚õîÔ∏è –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ' });
            }
        } else if (userState[userId] === 'awaiting_phone') {
            userData[userId] = { phone_number: originalText };
            userState[userId] = 'confirming_phone';
            await sock.sendMessage(from, { text: `üëÄ –ù–æ–º–µ—Ä –Ω–∞–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ? (${originalText})\n‚úÖ "–î–∞" - –¥–∞\n‚õîÔ∏è "–ù–µ—Ç" - –Ω–µ—Ç.` });
        } else if (userState[userId] === 'confirming_phone') {
            const phoneNumber = userData[userId].phone_number;
            if (text === '–¥–∞') {
                const result = await checkPhone(phoneNumber);
                await sock.sendMessage(from, { text: result });
                userState[userId] = 'start';
                delete userData[userId];
                await sock.sendMessage(from, { text: getMainMenu() });
            } else if (text === '–Ω–µ—Ç') {
                userState[userId] = 'awaiting_phone';
                await sock.sendMessage(from, { text: '‚òéÔ∏è –ñ–¥—É –æ—Ç —Ç–µ–±—è –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 707 404 6633).\n\n‚õîÔ∏è –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ' });
            } else {
                await sock.sendMessage(from, { text: `üëÄ –ù–æ–º–µ—Ä –Ω–∞–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ? (${originalText})\n‚úÖ "–î–∞" - –¥–∞\n‚õîÔ∏è "–ù–µ—Ç" - –Ω–µ—Ç.` });
            }
        } else if (userState[userId] === 'awaiting_chat') {
            await sock.sendMessage(from, { text: '–î—É–º–∞—é...üîç‚ú®üîÆ' });
            const result = await getAIResponse(originalText);
            await sock.sendMessage(from, { text: result });
            userState[userId] = 'start';
            delete userData[userId];
            await sock.sendMessage(from, { text: getMainMenu() });
        } else {
            await sock.sendMessage(from, { text: getMainMenu() });
        }
    });
}
startWhatsAppBot();