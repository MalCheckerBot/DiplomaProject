import telebot
import requests
from bs4 import BeautifulSoup
import base64
import time
import logging
import re
import threading
import os
import hashlib
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from cryptography.fernet import Fernet
from config_ob import (ENCRYPTED_TELEGRAM_BOT_TOKEN, ENCRYPTED_VIRUSTOTAL_API_KEY,
                       ENCRYPTED_GOOGLE_SAFE_BROWSING_API_KEY, ENCRYPTED_AIML_API_KEY,
                       ENCRYPTED_AIML_API_URL, ENCRYPTION_KEY)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from dotenv import load_dotenv
import datetime
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
cipher = Fernet(ENCRYPTION_KEY)
TELEGRAM_BOT_TOKEN = cipher.decrypt(ENCRYPTED_TELEGRAM_BOT_TOKEN).decode()
VIRUSTOTAL_API_KEY = cipher.decrypt(ENCRYPTED_VIRUSTOTAL_API_KEY).decode()
GOOGLE_SAFE_BROWSING_API_KEY = cipher.decrypt(ENCRYPTED_GOOGLE_SAFE_BROWSING_API_KEY).decode()
AIML_API_KEY = cipher.decrypt(ENCRYPTED_AIML_API_KEY).decode()
AIML_API_URL = cipher.decrypt(ENCRYPTED_AIML_API_URL).decode()
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
load_dotenv()
GOOGLE_CREDENTIALS_FILE = os.getenv('GOOGLE_CREDENTIALS_FILE')
SPREADSHEET_ID = os.getenv('SPREADSHEET_ID')
CLICKS_SHEET_NAME = os.getenv('CLICKS_SHEET_NAME', '–ö–ª–∏–∫–∏')
USERS_SHEET_NAME = os.getenv('USERS_SHEET_NAME', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
if not os.path.exists(GOOGLE_CREDENTIALS_FILE):
    logger.error(f"–§–∞–π–ª {GOOGLE_CREDENTIALS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
try:
    credentials = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_CREDENTIALS_FILE, scope)
    client = gspread.authorize(credentials)
    spreadsheet = client.open_by_key(SPREADSHEET_ID)
    try:
        clicks_sheet = spreadsheet.worksheet(CLICKS_SHEET_NAME)
        headers = clicks_sheet.row_values(1)
        if not headers or len(headers) < 3:
            clicks_sheet.clear()
            clicks_sheet.append_row(['ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–í—Ä–µ–º—è', '–î–µ–π—Å—Ç–≤–∏–µ'])
    except gspread.exceptions.WorksheetNotFound:
        clicks_sheet = spreadsheet.add_worksheet(title=CLICKS_SHEET_NAME, rows=1000, cols=3)
        clicks_sheet.append_row(['ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–í—Ä–µ–º—è', '–î–µ–π—Å—Ç–≤–∏–µ'])
    try:
        users_sheet = spreadsheet.worksheet(USERS_SHEET_NAME)
        headers = users_sheet.row_values(1)
        if not headers or len(headers) < 3:
            users_sheet.clear()
            users_sheet.append_row(['ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'])
    except gspread.exceptions.WorksheetNotFound:
        users_sheet = spreadsheet.add_worksheet(title=USERS_SHEET_NAME, rows=1000, cols=3)
        users_sheet.append_row(['ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'])
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Google Sheets: {e}")
    exit(1)
def save_user(user_id, username):
    try:
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cell = users_sheet.findall(str(user_id))
        if not cell:
            users_sheet.append_row([str(user_id), username or '–ù–µ—Ç –∏–º–µ–Ω–∏', now])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
def save_action(user_id, action_text):
    try:
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        clicks_sheet.append_row([str(user_id), now, action_text])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: {e}")
user_state = {}
user_data = {}
results = {}
stop_flags = {}
def is_valid_link(text):
    domain_pattern = r'^(https?://)?([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}(/.*)?$'
    return bool(re.match(domain_pattern, text))
def get_main_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üîó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É"), KeyboardButton("‚òéÔ∏è –£–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–æ–º–µ—Ä"))
    markup.add(KeyboardButton("üóÇ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª"), KeyboardButton("ü§ì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò"))
    markup.add(KeyboardButton("üëÄ –ü–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∞—Å"))
    return markup
def get_cancel_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å‚õîÔ∏è"))
    return markup
def get_confirm_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–î–∞‚úÖ"), KeyboardButton("–ù–µ—Ç‚õîÔ∏è"))
    return markup
def animate_link_loading(bot, chat_id, message_id):
    animation_frames = ["–ü—Ä–æ–≤–µ—Ä—è—é... üîç", "–ü—Ä–æ–≤–µ—Ä—è—é... üîç‚ú®", "–ü—Ä–æ–≤–µ—Ä—è—é... üîç‚ú®üîÆ"]
    frame_index = 0
    stop_flags[chat_id] = False
    while not stop_flags[chat_id]:
        try:
            bot.edit_message_text(animation_frames[frame_index], chat_id=chat_id, message_id=message_id)
            frame_index = (frame_index + 1) % len(animation_frames)
            time.sleep(1.5)
            if chat_id in results and results[chat_id] is not None:
                stop_flags[chat_id] = True
        except telebot.apihelper.ApiTelegramException:
            break
def animate_ai_loading(bot, chat_id, message_id):
    animation_frames = ["–î—É–º–∞—é... ü§ì", "–î—É–º–∞—é... ü§ìüí°", "–î—É–º–∞—é... ü§ìüí°‚ö°"]
    frame_index = 0
    stop_flags[chat_id] = False
    while not stop_flags[chat_id]:
        try:
            bot.edit_message_text(animation_frames[frame_index], chat_id, message_id)
            frame_index = (frame_index + 1) % len(animation_frames)
            time.sleep(1.5)
            if chat_id in results and results[chat_id] is not None:
                stop_flags[chat_id] = True
        except telebot.apihelper.ApiTelegramException:
            break
def animate_file_loading(bot, chat_id, message_id):
    animation_frames = ["–ü—Ä–æ–≤–µ—Ä—è—é... üîç", "–ü—Ä–æ–≤–µ—Ä—è—é... üîç‚ú®", "–ü—Ä–æ–≤–µ—Ä—è—é... üîç‚ú®üîÆ"]
    frame_index = 0
    stop_flags[chat_id] = False
    while not stop_flags[chat_id]:
        try:
            bot.edit_message_text(animation_frames[frame_index], chat_id, message_id)
            frame_index = (frame_index + 1) % len(animation_frames)
            time.sleep(3)
            if chat_id in results and results[chat_id] is not None:
                stop_flags[chat_id] = True
        except telebot.apihelper.ApiTelegramException:
            break
def check_link(url):
    vt_result = check_with_virustotal(url)
    vt_message = "ü¶† VirusTotal:\n" + (vt_result[
                                          "error"] if "error" in vt_result else f"–£–≥—Ä–æ–∑—ã: {vt_result['malicious']}/{vt_result['total_engines']} ‚ö†Ô∏è\n–û—Ç—á—ë—Ç: {vt_result['report_url']}")
    sa_result = check_with_scamadviser(url)
    sa_message = "‚òÑÔ∏è ScamAdviser:\n" + (sa_result[
                                            "error"] if "error" in sa_result else f"–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: {sa_result['trust_score']} / 100 ‚≠ê\n–û—Ç—á—ë—Ç: {sa_result['report_url']}")
    gsb_result = check_with_google_safe_browsing(url)
    gsb_message = "‚òÅÔ∏è Google Safe Browsing:\n" + (
        gsb_result["error"] if "error" in gsb_result else "–°—Å—ã–ª–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞ ‚úÖ" if gsb_result[
            "is_safe"] else f"–ù–∞–π–¥–µ–Ω—ã —É–≥—Ä–æ–∑—ã: {', '.join(gsb_result['threats'])} ‚ö†Ô∏è")
    result = f"{vt_message}\n\n{sa_message}\n\n{gsb_message}"
    is_dangerous = False
    is_safe = True
    if "error" not in vt_result:
        if vt_result["malicious"] > 0:
            is_dangerous = True
            is_safe = False
    else:
        is_safe = False
    if "error" not in sa_result:
        if int(sa_result["trust_score"]) < 75:
            is_dangerous = True
            is_safe = False
    else:
        is_safe = False
    if "error" not in gsb_result:
        if not gsb_result["is_safe"]:
            is_dangerous = True
            is_safe = False
    else:
        is_safe = False
    if is_dangerous:
        result += "\n\nüìù –ò—Ç–æ–≥:\n–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ - –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –í—Ä–µ–¥–æ–Ω–æ—Å–Ω–∞—è.\n–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –µ—ë –æ—Ç–∫—Ä—ã–≤–∞—Ç—å‚ùóÔ∏è"
    elif is_safe:
        result += "\n\nüìù –ò—Ç–æ–≥:\n–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ - –ë–µ–∑–æ–ø–∞—Å–Ω–∞ ‚úÖ"
    return result
def check_phone(phone_number):
    cleaned_number = re.sub(r'[()\-\s]+', '', phone_number.strip())
    if cleaned_number.startswith('8') and len(cleaned_number) >= 10:
        cleaned_number = '+7' + cleaned_number[1:]
    if not cleaned_number.startswith('+'):
        return {"error": "‚òéÔ∏è –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –ø–ª—é—Å–∞ (+)\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"}
    if not cleaned_number[1:].isdigit():
        return {"error": "‚òéÔ∏è –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ –ø–ª—é—Å–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"}
    spam_result = check_with_spamcalls(cleaned_number)
    if "error" in spam_result:
        return spam_result["error"]
    else:
        if spam_result["is_spam"]:
            return f"‚ö†Ô∏è –ù–æ–º–µ—Ä {cleaned_number} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —Å–ø–∞–º –∏–ª–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ.\n\nüîé –î–µ—Ç–∞–ª–∏:\n{spam_result['details']}\nüìù –û—Ç—á—ë—Ç: {spam_result['report_url']}"
        else:
            return f"‚úÖ –ù–æ–º–µ—Ä {cleaned_number} –±–µ–∑–æ–ø–∞—Å–µ–Ω.\n\nüìù –û—Ç—á—ë—Ç: {spam_result['report_url']}"
def check_with_virustotal(url):
    vt_url = 'https://www.virustotal.com/api/v3/urls'
    headers = {'x-apikey': VIRUSTOTAL_API_KEY}
    data = {'url': url}
    encoded_url = base64.urlsafe_b64encode(url.encode()).decode().strip("=")
    scan_response = requests.post(vt_url, headers=headers, data=data)
    if scan_response.status_code == 200:
        analysis_id = scan_response.json().get('data', {}).get('id', None)
        report_url = f'https://www.virustotal.com/gui/url/{encoded_url}/detection'
        if analysis_id:
            while True:
                analysis_response = requests.get(f"https://www.virustotal.com/api/v3/analyses/{analysis_id}",
                                                 headers=headers)
                if analysis_response.status_code == 200:
                    analysis_data = analysis_response.json().get('data', {}).get('attributes', {})
                    status = analysis_data.get('status')
                    if status == 'completed':
                        stats = analysis_data.get('stats', {})
                        malicious_count = stats.get('malicious', 0)
                        total_engines = stats.get('harmless', 0) + stats.get('malicious', 0) + stats.get('suspicious',
                                                                                                         0) + stats.get(
                            'undetected', 0)
                        return {"malicious": malicious_count, "total_engines": total_engines, "report_url": report_url}
                    elif status == 'queued':
                        time.sleep(10)
                    else:
                        return {"error": f"–û—à–∏–±–∫–∞, —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"}
                else:
                    return {"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"}
        else:
            return {"error": "–û—à–∏–±–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∞–Ω–∞–ª–∏–∑–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"}
    else:
        return {"error": f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ VirusTotal.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"}
def check_with_scamadviser(url):
    try:
        domain = url.split("//")[-1].split("/")[0]
        report_url = f"https://www.scamadviser.com/check-website/{domain}"
        response = requests.get(report_url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, "lxml")
            trustscore_container = soup.find(
                class_='tile__body tile__body--no-padding d-flex flex-column justify-content-center')
            if trustscore_container:
                trust_score_element = trustscore_container.find("div", id="trustscore")
                if trust_score_element and "data-rating" in trust_score_element.attrs:
                    trust_score = trust_score_element["data-rating"].strip()
                    return {"trust_score": trust_score, "report_url": report_url}
            return {"error": "–û—à–∏–±–∫–∞, —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"}
        else:
            return {"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ScamAdviser.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"}
    except Exception as e:
        return {"error": "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ScamAdviser.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"}
def check_with_google_safe_browsing(url):
    api_url = f'https://safebrowsing.googleapis.com/v4/threatMatches:find?key={GOOGLE_SAFE_BROWSING_API_KEY}'
    payload = {
        "client": {"clientId": "your-client-id", "clientVersion": "1.0"},
        "threatInfo": {
            "threatTypes": ["MALWARE", "SOCIAL_ENGINEERING", "UNWANTED_SOFTWARE", "POTENTIALLY_HARMFUL_APPLICATION"],
            "platformTypes": ["ANY_PLATFORM"],
            "threatEntryTypes": ["URL"],
            "threatEntries": [{"url": url}]
        }
    }
    try:
        response = requests.post(api_url, json=payload)
        if response.status_code == 200:
            data = response.json()
            if "matches" in data:
                threats = [match['threatType'] for match in data['matches']]
                return {"threats": threats, "is_safe": False}
            else:
                return {"threats": [], "is_safe": True}
        else:
            return {"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Google Safe Browsing.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"}
    except Exception as e:
        return {"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ Google Safe Browsing.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"}
def check_with_spamcalls(phone_number):
    try:
        if not phone_number.startswith('+'):
            return {"error": "‚òéÔ∏è –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –ø–ª—é—Å–∞ (+)\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"}
        if not phone_number[1:].isdigit():
            return {"error": "‚òéÔ∏è –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ –ø–ª—é—Å–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"}
        url = f'https://spamcalls.net/en/search?q={phone_number}'
        proxies = {
            "http": "http://kvufzuvo:k703tsxis9nt@198.23.239.134:6540",
            "https": "http://kvufzuvo:k703tsxis9nt@198.23.239.134:6540"
        }
        response = requests.get(url, proxies=proxies, timeout=10)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, "lxml")
            title = soup.find("h1")
            if title and phone_number in title.text:
                blocks = soup.find_all("div", class_="col-lg-12 clickable-scroll-to")
                details = {}
                for block in blocks:
                    h3 = block.find("h3")
                    if h3:
                        key = h3.text.strip()
                        if "Most frequently reported" in key:
                            key = "Most frequently reported"
                        value = h3.find_next("h4").text.strip() if h3.find_next("h4") else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
                        details[key] = value
                details_message = ""
                if "Spam-Risk" in details:
                    details_message += f"–£—Ä–æ–≤–µ–Ω—å –°–ø–∞–º–∞: {details['Spam-Risk']}\n"
                if "Country of origin" in details:
                    details_message += f"–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è: {details['Country of origin']}\n"
                if "Most frequently reported" in details:
                    details_message += f"–ß–∞—â–µ –≤—Å–µ–≥–æ –∂–∞–ª—É—é—Ç—Å—è –Ω–∞: {details['Most frequently reported']}\n"
                report_url = url
                if "Spam-Risk" in details or "Most frequently reported" in details:
                    return {"is_spam": True, "details": details_message, "report_url": report_url}
                else:
                    return {"is_spam": False, "details": "‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–ø–∞–º–∞.",
                            "report_url": report_url}
            else:
                return {"is_spam": False, "details": "‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–ø–∞–º–∞.", "report_url": url}
        else:
            return {"error": f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ SpamCalls.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"}
    except Exception as e:
        return {"error": f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ SpamCalls.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"}
def check_file_with_virustotal(file_path):
    vt_url = "https://www.virustotal.com/api/v3/files"
    headers = {"x-apikey": VIRUSTOTAL_API_KEY}
    try:
        with open(file_path, "rb") as file:
            file_content = file.read()
            sha256_hash = hashlib.sha256(file_content).hexdigest()
            file.seek(0)
            files = {"file": (file_path.split("/")[-1], file)}
            scan_response = requests.post(vt_url, headers=headers, files=files)
        if scan_response.status_code == 200:
            analysis_id = scan_response.json().get("data", {}).get("id")
            report_url = f"https://www.virustotal.com/gui/file/{sha256_hash}/detection"
            while True:
                analysis_response = requests.get(f"https://www.virustotal.com/api/v3/analyses/{analysis_id}",
                                                 headers=headers)
                if analysis_response.status_code == 200:
                    analysis_data = analysis_response.json().get("data", {}).get("attributes", {})
                    status = analysis_data.get("status")
                    if status == "completed":
                        stats = analysis_data.get("stats", {})
                        malicious_count = stats.get("malicious", 0)
                        total_engines = stats.get("harmless", 0) + stats.get("malicious", 0) + stats.get("suspicious",
                                                                                                         0) + stats.get(
                            "undetected", 0)
                        result = f"ü¶† VirusTotal:\n–£–≥—Ä–æ–∑—ã: {malicious_count}/{total_engines} ‚ö†Ô∏è\n–û—Ç—á—ë—Ç: {report_url}"
                        if malicious_count > 0:
                            result += "\n\nüìù –ò—Ç–æ–≥:\n–≠—Ç–æ—Ç —Ñ–∞–π–ª - –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π.\n–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –µ–≥–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å‚ùóÔ∏è"
                        else:
                            result += "\n\nüìù –ò—Ç–æ–≥:\n–≠—Ç–æ—Ç —Ñ–∞–π–ª - –ë–µ–∑–æ–ø–∞—Å–µ–Ω ‚úÖ"
                        return result
                    elif status == "queued":
                        time.sleep(10)
                    else:
                        return f"–û—à–∏–±–∫–∞, —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"
                else:
                    return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"
        else:
            return f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ VirusTotal.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"
    except Exception as e:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"
def get_ai_response(query):
    headers = {
        "Authorization": f"Bearer {AIML_API_KEY}",
        "Content-Type": "application/json"
    }
    prompt = f"–î–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è,–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏,–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ,—Å–∫–∞–∂–∏:'–ò–∑–≤–∏–Ω–∏, —è –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ.'–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ—è—Å–µ–Ω –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–π,–æ—Ç–≤–µ—á–∞–π:'–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω—è–ª —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å. –ó–∞–¥–∞–π –µ–≥–æ —Ç–æ—á–Ω–µ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!',–Ω–µ –ø—ã—Ç–∞–π—Å—è –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏–ª–∏ —É–≥–∞–¥—ã–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.–í–æ—Ç –≤–æ–ø—Ä–æ—Å:{query}"
    payload = {
        "model": "gpt-3.5-turbo-instruct",
        "prompt": prompt,
        "max_tokens": 200,
        "temperature": 0.3
    }
    try:
        response = requests.post(AIML_API_URL, headers=headers, json=payload)
        if response.status_code in (200, 201):
            result = response.json()
            clean_text = result["choices"][0]["text"].strip().replace("\n\n", " ").replace("\n", " ")
            return f"ü§ì –û—Ç–≤–µ—Ç:\n{clean_text}"
        else:
            return f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"
    except Exception as e:
        return "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –ò–ò.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ü•∫"
def reset_state(user_id):
    user_state[user_id] = 'start'
    if user_id in user_data:
        del user_data[user_id]
    if user_id in results:
        del results[user_id]
    if user_id in stop_flags:
        stop_flags[user_id] = True
        del stop_flags[user_id]
@bot.message_handler(commands=['start'])
def start_message(message):
    reset_state(message.chat.id)
    save_user(message.chat.id, message.from_user.username)
    save_action(message.chat.id, "/start")
    bot.send_message(message.chat.id,
                     "üëãüèª –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫, –Ω–æ–º–µ—Ä–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤.\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É - /link üîó\n–£–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–æ–º–µ—Ä - /number ‚òéÔ∏è\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª - /file üóÇ\n–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò - /chat ü§ì\n–ü–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∞—Å - /about üëÄ",
                     reply_markup=get_main_keyboard())
@bot.message_handler(commands=['about'])
def about_message(message):
    reset_state(message.chat.id)
    save_action(message.chat.id, "/about")
    bot.send_message(message.chat.id,
                     "üéì –Ø –¥–∏–ø–ª–æ–º–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ Astana IT University\n"
                     "–í —á–∞—Å—Ç–Ω–æ—Å—Ç–∏ Alikhan Zhuma, Valerii Pankov –∏ Rodion Kuznetsov.\n"
                     "–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª–∏, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –Ω–æ–º–µ—Ä–∞ –∏ —Ñ–∞–π–ª—ã üëÅ")
    bot.send_message(message.chat.id,
                     "üòä –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É - /link üîó\n–£–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–æ–º–µ—Ä - /number ‚òéÔ∏è\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª - /file üóÇ\n–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò - /chat ü§ì\n–ü–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∞—Å - /about üëÄ",
                     reply_markup=get_main_keyboard())
@bot.message_handler(commands=['link'])
def check_message(message):
    user_state[message.chat.id] = 'awaiting_link'
    save_action(message.chat.id, "/link")
    bot.send_message(message.chat.id,
                     "üîó –ñ–¥—É –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n–ñ–¥–∞—Ç—å –æ–∫–æ–ª–æ 15 —Å–µ–∫—É–Ω–¥ ‚åõÔ∏è\n\n‚õîÔ∏è /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
                     reply_markup=get_cancel_keyboard())
@bot.message_handler(commands=['number'])
def check_phone_message(message):
    user_state[message.chat.id] = 'awaiting_phone'
    save_action(message.chat.id, "/number")
    bot.send_message(message.chat.id,
                     "‚òéÔ∏è –ñ–¥—É –æ—Ç —Ç–µ–±—è –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 707 404 6633).\n\n‚õîÔ∏è /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
                     reply_markup=get_cancel_keyboard())
@bot.message_handler(commands=['chat'])
def chat_message(message):
    user_state[message.chat.id] = 'awaiting_chat'
    save_action(message.chat.id, "/chat")
    bot.send_message(message.chat.id,
                     "ü§ì –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å, —è —Ç–µ–±–µ –æ—Ç–≤–µ—á—É.\n\n‚õîÔ∏è /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
                     reply_markup=get_cancel_keyboard())
@bot.message_handler(commands=['file'])
def check_file_message(message):
    user_state[message.chat.id] = 'awaiting_file'
    save_action(message.chat.id, "/file")
    bot.send_message(message.chat.id,
                     "üóÇ –ñ–¥—É –æ—Ç —Ç–µ–±—è —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n–ñ–¥–∞—Ç—å 1-4 –º–∏–Ω—É—Ç—ã ‚åõÔ∏è\n(–º–∞–∫—Å–∏–º—É–º 20 –ú–ë)\n\n‚õîÔ∏è /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
                     reply_markup=get_cancel_keyboard())
@bot.message_handler(
    func=lambda message: message.text in ["üîó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É", "‚òéÔ∏è –£–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–æ–º–µ—Ä", "üóÇ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª",
                                          "ü§ì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò", "üëÄ –ü–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∞—Å"])
def handle_button(message):
    user_id = message.chat.id
    if message.text == "üîó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É":
        user_state[user_id] = 'awaiting_link'
        save_action(user_id, "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É")
        bot.send_message(user_id,
                         "üîó –ñ–¥—É –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n–ñ–¥–∞—Ç—å –æ–∫–æ–ª–æ 15 —Å–µ–∫—É–Ω–¥ ‚åõÔ∏è\n\n‚õîÔ∏è /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
                         reply_markup=get_cancel_keyboard())
    elif message.text == "‚òéÔ∏è –£–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–æ–º–µ—Ä":
        user_state[user_id] = 'awaiting_phone'
        save_action(user_id, "–£–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–æ–º–µ—Ä")
        bot.send_message(user_id,
                         "‚òéÔ∏è –ñ–¥—É –æ—Ç —Ç–µ–±—è –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 707 404 6633).\n\n‚õîÔ∏è /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
                         reply_markup=get_cancel_keyboard())
    elif message.text == "üóÇ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª":
        user_state[user_id] = 'awaiting_file'
        save_action(user_id, "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª")
        bot.send_message(user_id,
                         "üóÇ –ñ–¥—É –æ—Ç —Ç–µ–±—è —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n–ñ–¥–∞—Ç—å 1-4 –º–∏–Ω—É—Ç—ã ‚åõÔ∏è\n(–º–∞–∫—Å–∏–º—É–º 20 –ú–ë)\n\n‚õîÔ∏è /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
                         reply_markup=get_cancel_keyboard())
    elif message.text == "ü§ì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò":
        user_state[user_id] = 'awaiting_chat'
        save_action(user_id, "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò")
        bot.send_message(user_id,
                         "ü§ì –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å, —è —Ç–µ–±–µ –æ—Ç–≤–µ—á—É.\n\n‚õîÔ∏è /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
                         reply_markup=get_cancel_keyboard())
    elif message.text == "üëÄ –ü–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∞—Å":
        reset_state(user_id)
        save_action(user_id, "–ü–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∞—Å")
        bot.send_message(user_id,
                         "üéì –Ø –¥–∏–ø–ª–æ–º–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ Astana IT University\n"
                         "–í —á–∞—Å—Ç–Ω–æ—Å—Ç–∏ Alikhan Zhuma, Valerii Pankov –∏ Rodion Kuznetsov.\n"
                         "–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª–∏, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –Ω–æ–º–µ—Ä–∞ –∏ —Ñ–∞–π–ª—ã üëÅ")
        bot.send_message(user_id,
                         "üòä –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É - /link üîó\n–£–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–æ–º–µ—Ä - /number ‚òéÔ∏è\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª - /file üóÇ\n–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò - /chat ü§ì\n–ü–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∞—Å - /about üëÄ",
                         reply_markup=get_main_keyboard())
@bot.message_handler(
    func=lambda message: message.text in ["–û—Ç–º–µ–Ω–∏—Ç—å‚õîÔ∏è", "/cancel"] and user_state.get(message.chat.id) in [
        'awaiting_link', 'awaiting_phone', 'awaiting_chat', 'confirming_phone', 'awaiting_file'])
def cancel_action(message):
    reset_state(message.chat.id)
    save_action(message.chat.id, "/cancel")
    bot.send_message(message.chat.id,
                     "‚õîÔ∏è –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ! –ß—Ç–æ –¥–∞–ª—å—à–µ?\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É - /link üîó\n–£–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–æ–º–µ—Ä - /number ‚òéÔ∏è\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª - /file üóÇ\n–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò - /chat ü§ì\n–ü–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∞—Å - /about üëÄ",
                     reply_markup=get_main_keyboard())
@bot.message_handler(content_types=['text'])
def handle_text_message(message):
    user_id = message.chat.id
    state = user_state.get(user_id, 'start')
    if state == 'start':
        bot.send_message(user_id,
                         "üëãüèª –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫, –Ω–æ–º–µ—Ä–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤.\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É - /link üîó\n–£–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–æ–º–µ—Ä - /number ‚òéÔ∏è\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª - /file üóÇ\n–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò - /chat ü§ì\n–ü–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∞—Å - /about üëÄ",
                         reply_markup=get_main_keyboard())
    elif state == 'awaiting_link':
        link = message.text
        if is_valid_link(link):
            if not link.startswith(('http://', 'https://')):
                link = 'https://' + link
            loading_msg = bot.send_message(user_id, "–ü—Ä–æ–≤–µ—Ä—è—é...")
            bot.send_chat_action(user_id, 'typing')
            results[user_id] = None
            threading.Thread(target=animate_link_loading, args=(bot, user_id, loading_msg.message_id)).start()
            results[user_id] = check_link(link)
            stop_flags[user_id] = True
            bot.edit_message_text(results[user_id], user_id, loading_msg.message_id, disable_web_page_preview=True)
            reset_state(user_id)
            bot.send_message(user_id,
                             "üòä –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É - /link üîó\n–£–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–æ–º–µ—Ä - /number ‚òéÔ∏è\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª - /file üóÇ\n–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò - /chat ü§ì\n–ü–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∞—Å - /about üëÄ",
                             reply_markup=get_main_keyboard())
        else:
            bot.send_message(user_id,
                             "ü•∫ –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É.\n\nüîó –ñ–¥—É –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n–ñ–¥–∞—Ç—å –æ–∫–æ–ª–æ 15 —Å–µ–∫—É–Ω–¥ ‚åõÔ∏è\n\n‚õîÔ∏è /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
                             reply_markup=get_cancel_keyboard())
    elif state == 'awaiting_phone':
        phone_number = message.text
        user_data[user_id] = {'phone_number': phone_number}
        user_state[user_id] = 'confirming_phone'
        bot.send_message(user_id,
                         f"üëÄ –ù–æ–º–µ—Ä –Ω–∞–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ? ({phone_number})\n‚úÖ /yes - –¥–∞\n‚õîÔ∏è /no - –Ω–µ—Ç",
                         reply_markup=get_confirm_keyboard())
    elif state == 'confirming_phone':
        phone_number = user_data.get(user_id, {}).get('phone_number', '')
        if message.text in ["–î–∞‚úÖ", "/yes"]:
            result = check_phone(phone_number)
            if "error" in result:
                bot.send_message(user_id,
                                 f"{result['error']} (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 707 404 6633).\n\n‚õîÔ∏è /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
                                 reply_markup=get_cancel_keyboard())
                user_state[user_id] = 'awaiting_phone'
            else:
                bot.send_message(user_id, result, disable_web_page_preview=True)
                reset_state(user_id)
                bot.send_message(user_id,
                                 "üòä –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É - /link üîó\n–£–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–æ–º–µ—Ä - /number ‚òéÔ∏è\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª - /file üóÇ\n–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò - /chat ü§ì\n–ü–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∞—Å - /about üëÄ",
                                 reply_markup=get_main_keyboard())
        elif message.text in ["–ù–µ—Ç‚õîÔ∏è", "/no"]:
            user_state[user_id] = 'awaiting_phone'
            bot.send_message(user_id,
                             "‚òéÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–Ω–æ–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 707 404 6633).\n\n‚õîÔ∏è /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
                             reply_markup=get_cancel_keyboard())
    elif state == 'awaiting_chat':
        loading_msg = bot.send_message(user_id, "–î—É–º–∞—é...")
        bot.send_chat_action(user_id, 'typing')
        results[user_id] = None
        threading.Thread(target=animate_ai_loading, args=(bot, user_id, loading_msg.message_id)).start()
        query = message.text
        results[user_id] = get_ai_response(query)
        stop_flags[user_id] = True
        bot.edit_message_text(results[user_id], user_id, loading_msg.message_id)
        reset_state(user_id)
        bot.send_message(user_id,
                         "üòä –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É - /link üîó\n–£–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–æ–º–µ—Ä - /number ‚òéÔ∏è\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª - /file üóÇ\n–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò - /chat ü§ì\n–ü–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∞—Å - /about üëÄ",
                         reply_markup=get_main_keyboard())
    elif state == 'awaiting_file':
        bot.send_message(user_id,
                         "ü•∫ –≠—Ç–æ –Ω–µ —Ñ–∞–π–ª! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ).\n\nüóÇ –ñ–¥—É —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n–ñ–¥–∞—Ç—å 1-4 –º–∏–Ω—É—Ç—ã ‚åõÔ∏è\n(–º–∞–∫—Å–∏–º—É–º 20 –ú–ë)\n\n‚õîÔ∏è /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
                         reply_markup=get_cancel_keyboard())
@bot.message_handler(content_types=['document', 'photo', 'video'],
                     func=lambda message: user_state.get(message.chat.id) == 'awaiting_file')
def handle_file(message):
    user_id = message.chat.id
    loading_msg = bot.send_message(user_id, "–ü—Ä–æ–≤–µ—Ä—è—é...")
    bot.send_chat_action(user_id, 'typing')
    if message.document and message.document.file_size > 20 * 1024 * 1024:
        bot.edit_message_text("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 20 –ú–ë)", user_id, loading_msg.message_id)
        reset_state(user_id)
        bot.send_message(user_id,
                         "üòä –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É - /link üîó\n–£–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–æ–º–µ—Ä - /number ‚òéÔ∏è\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª - /file üóÇ\n–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò - /chat ü§ì\n–ü–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∞—Å - /about üëÄ",
                         reply_markup=get_main_keyboard())
        return
    elif message.video and message.video.file_size > 20 * 1024 * 1024:
        bot.edit_message_text("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 20 –ú–ë)", user_id, loading_msg.message_id)
        reset_state(user_id)
        bot.send_message(user_id,
                         "üòä –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É - /link üîó\n–£–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–æ–º–µ—Ä - /number ‚òéÔ∏è\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª - /file üóÇ\n–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò - /chat ü§ì\n–ü–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∞—Å - /about üëÄ",
                         reply_markup=get_main_keyboard())
        return
    elif message.photo and message.photo[-1].file_size > 20 * 1024 * 1024:
        bot.edit_message_text("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 20 –ú–ë)", user_id, loading_msg.message_id)
        reset_state(user_id)
        bot.send_message(user_id,
                         "üòä –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É - /link üîó\n–£–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–æ–º–µ—Ä - /number ‚òéÔ∏è\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª - /file üóÇ\n–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò - /chat ü§ì\n–ü–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∞—Å - /about üëÄ",
                         reply_markup=get_main_keyboard())
        return
    results[user_id] = None
    threading.Thread(target=animate_file_loading, args=(bot, user_id, loading_msg.message_id)).start()
    if message.document:
        file_info = bot.get_file(message.document.file_id)
        file_name = message.document.file_name
    elif message.photo:
        file_info = bot.get_file(message.photo[-1].file_id)
        file_name = f"photo_{user_id}.jpg"
    elif message.video:
        file_info = bot.get_file(message.video.file_id)
        file_name = message.video.file_name or f"video_{user_id}.mp4"
    else:
        bot.edit_message_text("–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ü•∫", user_id, loading_msg.message_id)
        reset_state(user_id)
        bot.send_message(user_id,
                         "üòä –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É - /link üîó\n–£–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–æ–º–µ—Ä - /number ‚òéÔ∏è\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª - /file üóÇ\n–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò - /chat ü§ì\n–ü–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∞—Å - /about üëÄ",
                         reply_markup=get_main_keyboard())
        return
    file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_info.file_path}"
    file_path = f"temp_{user_id}_{file_name}"
    with open(file_path, "wb") as f:
        f.write(requests.get(file_url).content)
    results[user_id] = check_file_with_virustotal(file_path)
    stop_flags[user_id] = True
    bot.edit_message_text(results[user_id], user_id, loading_msg.message_id, disable_web_page_preview=True)
    os.remove(file_path)
    reset_state(user_id)
    bot.send_message(user_id,
                     "üòä –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É - /link üîó\n–£–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–æ–º–µ—Ä - /number ‚òéÔ∏è\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª - /file üóÇ\n–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò - /chat ü§ì\n–ü–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∞—Å - /about üëÄ",
                     reply_markup=get_main_keyboard())
@bot.message_handler(content_types=['audio', 'voice', 'sticker', 'video_note', 'contact', 'location'])
def handle_invalid_input(message):
    user_id = message.chat.id
    state = user_state.get(user_id, 'start')
    if state == 'awaiting_link':
        bot.send_message(user_id,
                         "ü•∫ –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É.\n\nüîó –ñ–¥—É –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n–ñ–¥–∞—Ç—å –æ–∫–æ–ª–æ 15 —Å–µ–∫—É–Ω–¥ ‚åõÔ∏è\n\n‚õîÔ∏è /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
                         reply_markup=get_cancel_keyboard())
    elif state == 'awaiting_phone':
        bot.send_message(user_id,
                         "ü•∫ –≠—Ç–æ –Ω–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 707 404 6633).\n\n‚òéÔ∏è –ñ–¥—É –æ—Ç –≤–∞—Å –Ω–æ–º–µ—Ä.\n\n‚õîÔ∏è /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
                         reply_markup=get_cancel_keyboard())
    elif state == 'awaiting_chat':
        bot.send_message(user_id,
                         "ü•∫ –≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.\n\nü§ì –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, —è –æ—Ç–≤–µ—á—É.\n\n‚õîÔ∏è /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
                         reply_markup=get_cancel_keyboard())
    elif state == 'awaiting_file':
        bot.send_message(user_id,
                         f"ü•∫ –§–æ—Ä–º–∞—Ç {message.content_type} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.\n\nüóÇ –ñ–¥—É —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n–ñ–¥–∞—Ç—å 1-4 –º–∏–Ω—É—Ç—ã ‚åõÔ∏è\n(–º–∞–∫—Å–∏–º—É–º 20 –ú–ë)\n\n‚õîÔ∏è /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
                         reply_markup=get_cancel_keyboard())
def start_bot():
    while True:
        try:
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
            bot.polling(none_stop=True)
        except requests.exceptions.ConnectionError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
if __name__ == "__main__":
    start_bot()